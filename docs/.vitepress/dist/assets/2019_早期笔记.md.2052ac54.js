import{_ as s,o as a,c as n,a as l}from"./app.95bb5be5.js";const C=JSON.parse('{"title":"早期笔记","description":"","frontmatter":{},"headers":[{"level":2,"title":"1.常见数据结构","slug":"_1-常见数据结构","link":"#_1-常见数据结构","children":[{"level":3,"title":"数组","slug":"数组","link":"#数组","children":[]},{"level":3,"title":"堆栈","slug":"堆栈","link":"#堆栈","children":[]},{"level":3,"title":"队列","slug":"队列","link":"#队列","children":[]},{"level":3,"title":"链表","slug":"链表","link":"#链表","children":[]}]}],"relativePath":"2019/早期笔记.md"}'),p={name:"2019/早期笔记.md"},o=l(`<h1 id="早期笔记" tabindex="-1">早期笔记 <a class="header-anchor" href="#早期笔记" aria-hidden="true">#</a></h1><blockquote><p>本内容为读书笔记，知识点来自 <a href="https://juejin.im/post/5cd1ab3df265da03587c142a" target="_blank" rel="noreferrer">掘金 - 「中高级前端」窥探数据结构的世界- ES6版 - 前端劝退师</a></p></blockquote><h2 id="_1-常见数据结构" tabindex="-1">1.常见数据结构 <a class="header-anchor" href="#_1-常见数据结构" aria-hidden="true">#</a></h2><ul><li>数组: Array</li><li>堆栈: Stack</li><li>队列: Queue</li><li>链表: Linked Lists</li><li>树:    Trees</li><li>图:    Graphs</li><li>字典树: Tries</li><li>散列表(哈希表): Hash Table</li></ul><p>广义(较高的层次)上，基本有三种类型的数据结构：</p><ol><li>堆栈和队列 -&gt; 类似数组，仅在元素的插入和删除方式不同</li></ol><blockquote><p>todo: 插入&amp;删除的方式</p></blockquote><ol start="2"><li>树(Trees)和图(Graphs)是最复杂的。∵拓展了链表(Linked LIsts)的概念</li><li>散列表和字典树需要利用这些数据结构来可靠的执行</li></ol><h3 id="数组" tabindex="-1">数组 <a class="header-anchor" href="#数组" aria-hidden="true">#</a></h3><blockquote><p>for...in 为何很慢?</p><p>for...in 是能够迭代对象键的语句,引擎在处理时会执行一些额外的工作来跟踪已迭代的属性.</p></blockquote><h3 id="堆栈" tabindex="-1">堆栈 <a class="header-anchor" href="#堆栈" aria-hidden="true">#</a></h3><p>特点: <strong>后进先出</strong><br>操作: push , pop  _==实现==&gt; _ 数组(unshift , shift)    <br>实现:</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Stack</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">constructor</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(...</span><span style="color:#A6ACCD;font-style:italic;">items</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">reverse</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">stack</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">items</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 入栈</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">push</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(...</span><span style="color:#A6ACCD;font-style:italic;">items</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">reverse</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">stack</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">unshift</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">items</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">stack</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">items</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 出栈 1个元素</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">pop</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">reverse</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">stack</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">shift</span><span style="color:#F07178;">() </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">stack</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pop</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 查看处于栈顶的元素</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">peek</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">reverse</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">stack</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">stack</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">stack</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 栈是否为空</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">isEmpty</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">stack</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 清空栈</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">clear</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">stack</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> []</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 查询栈的大小</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">size</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">stack</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="队列" tabindex="-1">队列 <a class="header-anchor" href="#队列" aria-hidden="true">#</a></h3><p>特点: <strong>先进先出</strong><br>操作: unshift , pop    _==实现==&gt;  _数组(unshift , shift)</p><blockquote><p>运用:</p><ol><li>Browser / NodeJs 任务队列 (宏任务MacroTask和微任务MicroTask)</li><li>消息队列 MQ</li></ol></blockquote><h3 id="链表" tabindex="-1">链表 <a class="header-anchor" href="#链表" aria-hidden="true">#</a></h3><p>不是保留索引,而是指向其他元素<br><img src="https://cdn.nlark.com/yuque/0/2019/png/122315/1558362189559-3834cf50-11ba-4334-b7ab-424d77d3e3f7.png#align=left&amp;display=inline&amp;height=223&amp;name=image.png&amp;originHeight=223&amp;originWidth=654&amp;size=88926&amp;status=done&amp;width=654" alt="image.png"><br>单链表 和 双向链表<br>都使用 next(), prev() 操作<br>链表通常需要遍历整个结构,所以性能较差</p>`,18),e=[o];function t(c,r,F,y,i,D){return a(),n("div",null,e)}const h=s(p,[["render",t]]);export{C as __pageData,h as default};
