import{_ as a,o as e,c as s,a as n}from"./app.95bb5be5.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"怎么做","slug":"怎么做","link":"#怎么做","children":[]},{"level":2,"title":"初始框架","slug":"初始框架","link":"#初始框架","children":[]},{"level":2,"title":"一些疑问和坑以及说明","slug":"一些疑问和坑以及说明","link":"#一些疑问和坑以及说明","children":[{"level":3,"title":"1. draggable到canvas容器上面的ondrop事件不生效","slug":"_1-draggable到canvas容器上面的ondrop事件不生效","link":"#_1-draggable到canvas容器上面的ondrop事件不生效","children":[]},{"level":3,"title":"2.Canvas动态设置尺寸导致图片被缩放","slug":"_2-canvas动态设置尺寸导致图片被缩放","link":"#_2-canvas动态设置尺寸导致图片被缩放","children":[]},{"level":3,"title":"3.fabric的使用","slug":"_3-fabric的使用","link":"#_3-fabric的使用","children":[]}]}],"relativePath":"2020/搞了个接头霸王.md"}'),l={name:"2020/搞了个接头霸王.md"},t=n(`<p>最近玩 ~~公主连接 ~~ 公主焊接比较多。之前换头梗也很流行，换头的<a href="http://kyaru-concat.now.sh/" target="_blank" rel="noreferrer">web应用</a>也有，但是是个台湾作者做的，大陆连接过去速度不能保证，而且自己想搞骚操作也不行。就索性自己做一个玩玩。</p><h2 id="怎么做" tabindex="-1">怎么做 <a class="header-anchor" href="#怎么做" aria-hidden="true">#</a></h2><p>接头, 最主要的就是图像拼接合并辣! 所以这里用到了一个开源库 <a href="http://fabricjs.com/" target="_blank" rel="noreferrer">Fabric</a>. 这个库在 canvas 处理上面特别强大, 没有你想不到的功能, 只有他们做不到的功能.<br>另外就是 <code>臭鼬头</code> 是哪来的. 本来想写个Node直接扒台湾同胞的, 但是发现是用 <a href="https://github.com/sveltejs/svelte" target="_blank" rel="noreferrer">Svelet</a> . 并拿不到具体的HTMLDOM结构。结果只有放弃，手动在console中拉一下Node Request下来.<br>再有就是用到了 HTML5 的 dragable 特性, 比台湾同胞的点击事件体验要好一点 (TODO: 移动端需要 <code>touch</code> 适配 ).</p><h2 id="初始框架" tabindex="-1">初始框架 <a class="header-anchor" href="#初始框架" aria-hidden="true">#</a></h2><blockquote><p>简单使用了一下 vue , 其实不用也可以, 只是嫌麻烦.</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2020/png/122315/1590740946017-806faa73-d810-4b0a-9544-731292bad94f.png#align=left&amp;display=inline&amp;height=402&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=402&amp;originWidth=550&amp;size=21799&amp;status=done&amp;style=shadow&amp;width=550" alt="image.png"><br>基本上的逻辑是这样, 可以说是很简单了. 全程在前端处理不涉及后端. 如果硬要说的话, 可能是挂载到服务器的时候臭鼬头像的来源需要web server配置一下( <code>Nginx</code> )</p><h2 id="一些疑问和坑以及说明" tabindex="-1">一些疑问和坑以及说明 <a class="header-anchor" href="#一些疑问和坑以及说明" aria-hidden="true">#</a></h2><h3 id="_1-draggable到canvas容器上面的ondrop事件不生效" tabindex="-1">1. draggable到canvas容器上面的ondrop事件不生效 <a class="header-anchor" href="#_1-draggable到canvas容器上面的ondrop事件不生效" aria-hidden="true">#</a></h3><p>需要 preventDefault 来阻止默认的行为. 同时要禁止容器的 <code>ondragover</code> 事件, preventDefault 或者 return false 均可.</p><blockquote><p>web页面或应用程序的大多数区域都不是 drop 数据的有效位置。因此，这些事件的默认处理是不允许出现 drop。如果您想要允许 drop，您必须通过取消事件来防止默认的处理。您可以通过从attribute-defined 事件监听器返回 <code>false</code>，或者通过调用事件的 <code>preventDefault()</code> 方法来实现这一点。后者在一个单独的脚本中定义的函数中可能更可行。 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_Drag_and_Drop_API/Drag_operations#droptargets" target="_blank" rel="noreferrer">MDN解释</a></p></blockquote><h3 id="_2-canvas动态设置尺寸导致图片被缩放" tabindex="-1">2.Canvas动态设置尺寸导致图片被缩放 <a class="header-anchor" href="#_2-canvas动态设置尺寸导致图片被缩放" aria-hidden="true">#</a></h3><p>动态设置了canvas尺寸后, 绘制好的图片会受到影响. 所以最好还是 clear 一下重新绘制.</p><h3 id="_3-fabric的使用" tabindex="-1">3.fabric的使用 <a class="header-anchor" href="#_3-fabric的使用" aria-hidden="true">#</a></h3><h4 id="a-本次玩具用到的fabric的模块" tabindex="-1">a.本次玩具用到的fabric的模块 <a class="header-anchor" href="#a-本次玩具用到的fabric的模块" aria-hidden="true">#</a></h4><p>因为就一个小玩具, 也就用到了 fabric 的 Canvas 和 Image, 以及目前还在 beta 版本中的 Control 模块.<br>首先需要实例化 fabric, 提供一个 canvas 来使用 fabric的Canvas构造器.</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> fabricCanvas </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> fabric</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Canvas</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">canvas</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// id</span></span>
<span class="line"></span></code></pre></div><p>然后在选择图片后把该图片设置为canvas的background</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// img: HTMLElement</span></span>
<span class="line"><span style="color:#A6ACCD;">fabricCanvas</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setBackgroundImage</span><span style="color:#A6ACCD;">(img)</span></span>
<span class="line"></span></code></pre></div><p>在挑选臭鼬 ondrop 后 Image 实例化加入到 <code>fabricCanvas</code> 中</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// img: HTMLElement (head)</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> fabImg </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> fabric</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Image</span><span style="color:#A6ACCD;">(img)</span></span>
<span class="line"><span style="color:#A6ACCD;">fabricCanvas</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;">(fabImg)</span></span>
<span class="line"></span></code></pre></div><p>导出的时候有一个问题: 跨域. 这里在 Image 实例化时有 crossOrigin 配置, crossorigin: &quot;anonymous&quot; || &quot;&quot; 表示不做同源策略检查. 但是貌似在本地处理时也不是很好使, 由于我最终会放置在服务器上面的, 肯定是遵循了同源策略了, 所以就没管.</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">fabricCanvas</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toDataUrl</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{...</span><span style="color:#A6ACCD;">options</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 这里导出的和 FileReader.toDataUrl 相同, 为文件url.</span></span>
<span class="line"><span style="color:#89DDFF;">																		 </span><span style="color:#676E95;font-style:italic;">// 所以需要用到a标签来进行下载</span></span>
<span class="line"></span></code></pre></div><h4 id="b-beta版本control类的操作" tabindex="-1">b.beta版本Control类的操作 <a class="header-anchor" href="#b-beta版本control类的操作" aria-hidden="true">#</a></h4><p>由于我们需要在挑选臭鼬时不仅仅有提供的缩放旋转的功能, 还需要有额外的删除, 镜像翻转的功能, 这在目前的稳定版本中 (v3.6+) 是没有的. <a href="http://fabricjs.com/custom-control-render" target="_blank" rel="noreferrer">官方文档</a>中给出了在 beta 版本(v4.0) 中有这样的实现. 所以按照官方给出的 demo, 也能很容易的添加上额外的操作按钮.</p><p>以上基本就是一个小玩具完成了, 剩下的 TodoList 就是</p><ul><li>[x] 移动端的支持</li><li>[ ] 样式美化</li><li>[ ] webpack打包处理</li></ul><p>就酱!</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/122315/1590744583447-f2e15bf4-336e-48a1-a127-5a7d5f537e01.png#align=left&amp;display=inline&amp;height=56&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=222&amp;originWidth=206&amp;size=27241&amp;status=done&amp;style=none&amp;width=52" alt="image.png">(寻找下一个<a href="http://www.marunhao.cn/kyaru/" target="_blank" rel="noreferrer">身子</a>中...)</p>`,28),r=[t];function o(p,c,i,d,h,g){return e(),s("div",null,r)}const y=a(l,[["render",o]]);export{f as __pageData,y as default};
