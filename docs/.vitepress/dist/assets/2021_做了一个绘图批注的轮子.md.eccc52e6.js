import{_ as e,o as l,c as i,a}from"./app.95bb5be5.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":3,"title":"业务需要什么","slug":"业务需要什么","link":"#业务需要什么","children":[]},{"level":3,"title":"理论上怎么实现","slug":"理论上怎么实现","link":"#理论上怎么实现","children":[]},{"level":3,"title":"实现的过程","slug":"实现的过程","link":"#实现的过程","children":[]}],"relativePath":"2021/做了一个绘图批注的轮子.md"}'),o={name:"2021/做了一个绘图批注的轮子.md"},d=a('<blockquote><p>最近公司项目里面有一个前端批注展示的需求, 看了一圈开源社区, 大多是在截图上进行绘制的轮子, 我们的需求并不需要截图, 那么精简一下去除截图部分的功能, 就出现了符合要求的轮子了~</p></blockquote><h3 id="业务需要什么" tabindex="-1">业务需要什么 <a class="header-anchor" href="#业务需要什么" aria-hidden="true">#</a></h3><ol><li>需要有绘图区域,</li><li>提供 <code>方框</code> <code>箭头</code> <code>文本</code> 三种绘制形状,</li><li>提供预设的颜色,</li><li>提供 <code>撤销</code> <code>恢复</code> 功能</li><li>有回显能力</li></ol><h3 id="理论上怎么实现" tabindex="-1">理论上怎么实现 <a class="header-anchor" href="#理论上怎么实现" aria-hidden="true">#</a></h3><ol><li>绘图区域很好说, 直接 <code>canvas</code> 一把梭</li><li>都有现成的API进行绘制, <code>drawRect</code> <code>fillText</code> , 但是箭头的部分需要运用一些 <strong>小学二年级</strong> 就学过的三角函数.</li><li>颜色也很好说 <code>strokeStyle</code></li><li>这个考虑实现方式的话, 考虑了两种思路, 后面详细说明.</li><li>绘制数据的存储方式</li></ol><h3 id="实现的过程" tabindex="-1">实现的过程 <a class="header-anchor" href="#实现的过程" aria-hidden="true">#</a></h3><h4 id="绘制区域" tabindex="-1">绘制区域 <a class="header-anchor" href="#绘制区域" aria-hidden="true">#</a></h4><p>由于是覆盖在需要表现的元素上方, 因此用了绝对定位, 在dom加载完成后对canvas进行宽高的设定. 同时要考虑到回显时 不同分辨率 下绘制图形的缩放问题.<br>那么, 需要从以下几点入手:</p><ol><li>初始化的宽高</li><li>绘图基础数据的临时存储</li><li>回显数据绘制的等比缩放</li></ol>',9),c=[d];function t(r,n,_,s,h,p){return l(),i("div",null,c)}const m=e(o,[["render",t]]);export{f as __pageData,m as default};
